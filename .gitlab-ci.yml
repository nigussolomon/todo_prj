stages:
  - clean
  - test
  - build

.base: &base
  image: 'ruby:3.2.2'
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - bundle install

.base_db: &base_db
  <<: *base
  variables:
    RAILS_ENV: test
    DB_HOST: postgres
    POSTGRES_DB: ci_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "runner123"
  services:
    - postgres:15.3-alpine
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - bundle install
    - cp config/database-ci.yml config/database.yml
    - bundle exec rails db:create db:schema:load

lint:
  <<: *base
  stage: clean
  script:
    - bundle exec rubocop

brakeman:
  <<: *base
  stage: clean
  script:
    - bundle exec brakeman --color

assets:
  <<: *base
  stage: clean
  script:
    - bundle exec rails assets:precompile

test:
  <<: *base_db
  stage: test
  script: 
    - bundle exec rails spec
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
    when: on_success

system_test:
  <<: *base_db
  stage: test
  script: 
    - bundle exec rails spec:system

.base_build: &base_build
  stage: build
  image: docker:23.0.6
  services:
    - docker:23.0.6-dind
  before_script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS
  script:
    - docker build -f $DOCKER_FILE -t $DOCKER_REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $DOCKER_REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG

build_db:
  <<: *base_build
  variables:
    IMAGE_NAME: todo_db
    IMAGE_TAG: latest
    DOCKER_FILE: docker/db/Dockerfile

build_app:
  <<: *base_build
  variables:
    IMAGE_NAME: todo_app
    IMAGE_TAG: latest
    DOCKER_FILE: docker/app/Dockerfile

build_nginx:
  <<: *base_build
  variables:
    IMAGE_NAME: todo_nginx
    IMAGE_TAG: latest
    DOCKER_FILE: docker/nginx/Dockerfile
